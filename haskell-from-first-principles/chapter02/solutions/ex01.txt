##################################
# page 50: Comprehension Check
# 

1. given the lines of code

half x = x / 2
square x = x * x

# Ans.
in REPL we have to use let

Œª> let half x = x / 2
Œª> let square x = x * x



2. Write one function that has one parameter and works for all the following expressions. Be sure to name the function.

3.14 * (5 * 5)
3.14 * (10 * 10)
3.14 * (2 * 2)
3.14 * (4 * 4)

# Ans.
define circleArea function

Œª> let circleArea r = 3.14 * (r * r)



3. There is a value in Prelude called pi. Rewrite your function to use pi instead of 3.14.
# Ans.

Œª> let circleAre r = pi * (r * r)


##################################
# page 56: Parentheses and Association
# 
# do parenthization changes the results?
#
1. a) 8 + 7 * 9
   b) (8 + 7) * 9

   # it changes the answer because * is infixl 7, whereas + is infixl 6

2. a) perimeter x y = (x * 2) + (y * 2)
   b) perimeter x y = x * 2 + y * 2

   # it is unchanged

3. a) f x = x / 2 + 9
   b) f x = x / (2 + 9)

   # it changes, because / is infixl 7, whereas + is infixl 6



##################################
# page 67: Heal the sick
# 
# fix the following code
#
1. let area x = 3. 14 * (x * x)
   # Ans
   let area x = 3.14 * (x * x)

2. let double x = b * 2
   # Ans.
   let double x = x * 2

3. x = 7
    y = 10
   f = x + y

   # Ans.
   x = 7
   y = 10
   f = x + y


##################################
# page 90: Parentheses and Association
# 
# do parenthization change the results?
#
1. 2 + 2 * 3 - 1
   = 2 + (2 * 3) - 1
   = 2 + ((2 * 3) - 1)

2. (^) 10 $ 1 + 1
   = (^) 10 $ (1 + 1)

3. 2 ^ 2 * 4 ^ 5 + 1
   = (2 ^ 2 * 4 ^ 5) + 1
   = ((2 ^ 2) * (4 ^ 5)) + 1


##################################
# page 91: Equivalent Expressions
# 
# Which of the following pairs of expressions will return the same result when evaluated?
#
1. Œª> 1 + 1         # gives same result
      = 2
   Œª> 2

2. Œª> 10 ^ 2        # gives same result
      = 100
   Œª> 10 + 9 * 10
      = 100

3. Œª> 400 - 37
      = 63
   Œª> (-) 37 400    # doesn't give same result
      = -63

4. Œª> 100 `div` 3  
      = 33
   Œª> 100 / 3       # doesn't give same result
      = 33.333333

5. Œª> 2 * 5 + 18
      = 28
   Œª> 2 * (5 + 18)  # doesn't give same result
      = 46


##################################
# page 92: More Fun with Functions
# 
#
#
z = 7 
x = y ^ 2
waxOn = x * 5
y = z + 8

# Ans. All solutions in ex01.hs

1. Now you have a value called waxOn in your REPL. What do you think will happen if you enter: 
10 + waxOn
-- or
(+10) waxOn
-- or
(-) 15 waxOn
-- or
(-) waxOn 15


2. Earlier we looked at a function called triple. While your REPL has waxOn in session, re-enter the triple function at the prompt:
let triple x = x * 3


3. Now, what will happen if we enter this at our GHCi prompt? What do you think will happen first, considering what role waxOn is playing in this function call? Then enter it, see what does happen, and check your understanding: 
triple waxOn


4. Rewrite waxOn as an expression with a where clause in your source file. Load it into your REPL and make sure it still works as expected. 


5. To the same source file where you have waxOn, add the triple function. Remember: You don‚Äôt need let and the function name should be at the left margin (that is, not nested as one of the waxOn expressions). Make sure it works by loading it into your REPL and then entering triple waxOn again at the REPL prompt. You should have the same answer as you did above.


6. Now, without changing what you‚Äôve done so far in that file, add a new function called waxOff that looks like this: 
waxOff x = triple x


7. Load the source file into your REPL and enter waxOff waxOn at the prompt. You now have a function, waxOff that can be applied to a variety of arguments ‚Äî not just waxOn but any (numeric)  value you want to put in for ùë•. Play with that a bit. What is the result of waxOff 10 or waxOff (-50)? Try modifying your waxOff function to do something new ‚Äî perhaps you want to first triple the ùë• value and then square it or divide it by 10. Spend some time getting comfortable with modifying the source file code, reloading it, and checking your modification in the REPL.
