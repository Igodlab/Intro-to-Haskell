NOTE: To get λ , type SHIFT + CTRL + u followed by 03bb
NOTE: To get ⊥ , type SHIFT + CTRL + u followed by 022a5



##################################
# page 557: Exercises
#           Understanding Folds
# 
# 

1. foldr (*) 1 [1..5] will return the same result as which of the following:

a) flip (*) 1 [1..5] 
b) foldl (flip (*)) 1 [1..5] # Ans: b) & c)
c) foldl (*) 1 [1..5]        # Ans: b) & c)


2. Write out the evaluation steps for foldl (flip (*)) 1 [1..3]
# Ans: 6
λ> :t foldl 
foldl :: Foldable t => (b -> a -> b) -> b -> t a -> b
foldl f z [] = z
foldl f z (x:xs) = foldl f (f z x) xs

# working out prob2:
foldl (flip (*)) 1 [1..3]
foldl (flip (*)) 1 (1:[2,3]) = foldl (flip (*)) ((flip (*)) 1 1) [2,3]
                                                ----------------
                                                = (*) 1 1
                                                = 1
                               ---------------------------------------
                               foldl (flip (*)) 1 [2,3]
                               foldl (flip (*)) 1 (2:[3]) = foldl (flip (*)) (flip (*) 1 2) [3]
                                                                             --------------
                                                                             = (*) 2 1
                                                                             = 2
                                                            -----------------------------------
                                                            foldl (flip (*)) 2 [3]
                                                            foldl (flip (*)) 2 (3:[]) = foldl (flip (*)) (flip (*) 2 3) []
                                                                                                         --------------
                                                                                                         = (*) 3 2
                                                                                                         = 6
                                                                                        ----------------------------------
                                                                                        foldl (flip (*)) 6 [] = 6



3. One diﬀerence between foldr and foldl is:

a) foldr, but not foldl, traverses the spine of a list from right to left # 
b) foldr, but not foldl, always forces the rest of the fold               #  
c) foldr, but not foldl, associates to the right                          # Ans: c)
d) foldr, but not foldl, is recursive                                     # 


4. Folds are catamorphisms, which means they are generally used to

a) reduce structure                  # Ans: a)
b) expand structure
c) render you catatonic
d) generate infinite data structures


5. The following are simple folds very similar to what you’ve already seen, but each has at least one error. Please fix them and test in your REPL:

a) foldr (++) ["woot", "WOOT", "woot"]        
# Ans: foldr (++) [] ["woot", "WOOT", "woot"]

b) foldr max [] "fear is the little death"
# Ans: foldr max '\00' "fear is the little death"

c) foldr and True [False, True]               
# Ans: foldr (&&) True [False, True]

d) This one is more subtle than the previous. 
   Can it ever return a diﬀerent answer?      
   foldr (||) True [False, True]              
# Ans: No, unless all arguments are False.

e) foldl ((++) . show) "" [1..5]              
# Ans: i)  foldl (flip $ (++) . show) "" [1..5] = "54321"
       ii) foldr ((++) . show) "" [1..5]        = "12345"

f) foldr const 'a' [1..5]                     
# Ans: i)  foldl const 'a' [1..5]
       ii) foldr (flip const) 'a' [1..5]
       # 
       # i) & ii) are equivalent because:
       # 
       # λ> :t foldr
       # foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
       #
       # and const doesn't match
       # λ> :t const
       #     const :: a -> b -> a 
       #
       # so flipping it does the trick
       # λ> :t (flip const)
       #     (flip const) :: a -> b -> b
       #

g) foldl const 0 "tacos"                      
# Ans: this one works fine

h) foldl (flip const) 0 "burritos"            
# Ans: i)  foldl (const) 0 "burritos"
       ii) foldr (flip const) 0 "burritos" 
                                           
                                             
i) foldl (flip const) 'z' [1..5]              
# Ans: i)  foldr (flip const) 'z' [1..5]
       ii) foldl (const) 'z' [1..5]






##################################
# page 566: Exercises
#           Database Processing
# 
# see: DatabaseProcessing_pg566.hs
# 




##################################
# page 566: Exercises
#           Scans
# 
# see: Scans_pg578.hs
# 



##################################
# page 578: Chapter Exercises
#           Warm-up and review
# 
# see: WarmUp_pg578.hs
# 


##################################
# page 580: Chapter Exercises
#           Rewriting functions using folds
# 
# see: RewritingFunctions_pg580.hs
# 

