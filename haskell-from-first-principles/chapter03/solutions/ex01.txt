##################################
# page 109: Scope
# 

1. These lines of code are from a REPL session. Is 𝑦 in scope for 𝑧?

Prelude> let x = 5
Prelude> let y = 7
Prelude> let z = x * y

# Ans:
yes

2. These lines of code are from a REPL session. Is ℎ in scope for 𝑔? Go with your gut here.

Prelude> let f = 3
Prelude> let g = 6 * f + h

# Ans:
No.

3. This code sample is from a source file. Is everything we need to execute area in scope?

area d = pi * (r * r)
r = d / 2

# Ans:
No, d is not in scope for area

4. This code is also from a source file. Now are 𝑟 and 𝑑 in scope for area? 

area d = pi * (r * r)
  where r = d / 2

# Ans:
Yes, now d is in scope

##################################
# page 111: Exercises: Sytax Errors
# 

1. ++ [1, 2, 3] [4, 5, 6]
# ++ is an infix operator, so when used as a prefix we need parenthization
# Fix: 
   (++) [1, 2, 3] [4, ,5 ,6]

2. '<3' ++ ' Haskell'
# single quotations are reserved for Char type not [Char]
# Fix:
   "<3" ++ "Haskell"

3. concat ["<3", " Haskell"]
# No fix needed

##################################
# page 122: Reading Syntax
# 

1. For the following lines of code, read the syntax carefully and decide if they are written correctly. Test them in your REPL after you’ve decided to check your work. Correct as many as you can.

a) concat [[1, 2, 3], [4, 5, 6]] # already correct
b) ++ [1, 2, 3] [4, 5, 6]        # (++) [1, 3, 4] [4, 5, 6]
c) (++) "hello" " world"         # already correct
d) ["hello" ++ " world]          # already correct
e) 4 !! "hello"                  # "hello" !! 4
f) (!!) "hello" 4                # already correct
g) take "4 lovely"               # take 4 "lovely"
h) take 3 "awesome"              # already correct

2. Next we have two sets: the first set is lines of code and the other is a set of results. Read the code and figure out which results came from which lines of code. Be sure to test them in the REPL.

a) concat [[1 * 6], [2 * 6], [3 * 6]] 
b) "rain" ++ drop 2 "elbow"           
c) 10 * head [1, 2, 3]                
d) (take 3 "Julie") ++ (tail "yes")   
e) concat [tail [1, 2, 3],            
           tail [4, 5, 6],
           tail [7, 8, 9]]

Can you match each of the previous expressions to one of these results presented in a scrambled order?

a) "Jules"        # comes from: d)
b) [2,3,5,6,8,9]  # comes from: e)
c) "rainbow"      # comes from: b)
d) [6,12,18]      # comes from: a)
e) 10             # comes from: c)


##################################
# page 124: Building Functions
# 

# See ex01.hs
