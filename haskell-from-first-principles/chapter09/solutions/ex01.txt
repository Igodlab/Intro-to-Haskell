NOTE: To get λ , type SHIFT + CTRL + u followed by 03bb
NOTE: To get ⊥ , type SHIFT + CTRL + u followed by 022a5



##################################
# page 467: EnumFromto
# 
# see: EnumFromto_pg467.hs
# 





##################################
# page 474: The Fearful Symmmetry
# 
# see: PoemLines_pg474.hs
# 






##################################
# page 481: Comprehend Thy Lists
# 
# 

Take a look at the following functions, figure what you think the output lists will be, and then run them in your REPL to verify (note that you will need the mySqr list from above in scope to do this):

λ> let mySqr = [x^2 | x <- [1..10]]
λ> [x | x <- mySqr, rem x 2 == 0]
# Ans: [4,16,36,64,100]

[(x, y) | x <- mySqr,
          y <- mySqr,
          x < 50, y > 50]
# Ans: 

take 5 [ (x, y) | x <- mySqr,
                  y <- mySqr,
                  x < 50, y > 50 ]
# Ans: [(1,64),(1,81),(1,100),(4,64),(4,81),(4,100),(9,64),(9,81),(9,100),(16,64),(16,81),(16,100),(25,64),(25,81),(25,100),(36,64),(36,81),(36,100),(49,64),(49,81),(49,100)]                  






##################################
# page 484: Square Cube
# 
# see: SquareCube_pg484.hs
# 





##################################
# page 498: Exercises: Bottom Madness
#           Will it blow up?
# 


NOTE: To get λ type SHIFT + CTRL + u followed by 03bb.

Will the following expressions return a value or be ⊥ ?

1. [x^y | x <- [1..5], y <- [2, undefined]]
# Ans: blows up!

2. take 1 $ [x^y | x <- [1..5], y <- [2, undefined]]
# Ans: [1]; doesn't blow up because `undefined` is never evaluated, we `take 1`

3. sum [1, undefined, 3]
# Ans: blows up!

4. length [1, 2, undefined]
# Ans: 3; `length` increases counter for number of elements in list

5. length $ [1, 2, 3] ++ undefined
# Ans: blows up!

6. take 1 $ filter even [1, 2, 3, undefined]
# Ans: [2]; doesn't blow up because `undefined` is never evaluated, we `take 1`

7. take 1 $ filter even [1, 3, undefined]
# Ans: blows up!

8. take 1 $ filter odd [1, 3, undefined]
# Ans: [1]; doesn't blow up because `undefined` is never evaluated, we `take 1`

9. take 2 $ filter odd [1, 3, undefined]
# Ans: [1, 3]; doesn't blow up because `undefined` is never evaluated, we `take 2`

10. take 3 $ filter odd [1, 3, undefined]
# Ans: blows up!





##################################
# page 499: Exercises: Bottom Madness
#           Intermission: Is it in normal form?
# 
# 

For each expression below, determine whether it’s in:

1. WEAK HEAD NORMAL FORM (WHNF) - normal form, which implies weak head normal form;
2. NORMAL FORM (NF)             - weak head normal form only; or,
3. Neither


Remember that an expression cannot be in normal form or weak head normal form if the outermost part of the expression isn’t a data constructor. It can’t be in normal form if any part of the expression is unevaluated. 

1. [1, 2, 3, 4, 5]
# Ans: NF; all the values are fully evaluated

2. 1 : 2 : 3 : 4 : _
# Ans: WHNF; the outermost part ":" is a data constructor and it hasn't been fully evaluated.

3. enumFromTo 1 10
# Ans: Neither; since the outermost part "enumFromTo" is not a data constructor and it hasn't been fully evaluated

4. length [1, 2, 3, 4, 5]
# Ans: Neither; the outermost part "length" is not a data constructor and it hasn't been fully evaluated.

5. sum (enumFromTo 1 10)
# Ans: NF; the outermost part "sum" is not a data constructor and it hasn't been fully evaluated

6. ['a'..'m'] ++ ['n'..'z']
# Ans: the outermost part "++" is not a data constructor and it hasn't been fully evaluated

7. (_, 'b')
# Ans: WHNF; the outermost part "," is a data constructor and it hasn't been fully evaluated





##################################
# page 509: Exercises: More Bottoms
# 

As always, we encourage you to try figuring out the answers before you enter them into your REPL.

1. Will the following expression return a value or be ⊥ ?
take 1 $ map (+1) [undefined, 2, 3]
# Ans: ⊥ error!

2. Will the following expression return a value?
take 1 $ map (+1) [1, undefined, 3]
# Ans: yes! it returns [2]

3. Will the following expression return a value?
take 2 $ map (+1) [1, undefined, 3]
# Ans: no! it returns a bottom (⊥ ) error!

4. What does the following mystery function do? What is its type? Describe it (to yourself or a loved one) in standard English and then test it out in the REPL to make sure you were correct.

itIsMystery xs = map (\x -> elem x "aeiou") xs
# Ans: itIsMystery :: [Char]
                   --  ^ ad-hoc (concrete) list of type Char, because input is compared to Char
                   -> [Bool]
                   --  ^ returns a list of Bool from after mapping with `eval`



5. What will be the result of the following functions:

a) map (^2) [1..10]                          # Ans: [1,4,9,16,25,36,49,64,81,100]
b) map minimum [[1..10], [10..20], [20..30]] # Ans: [1,10,20]
-- n.b. `minimum` is not the same function   # 
-- as the `min` that we used before          # 
c) map sum [[1..5], [1..5], [1..5]]          # Ans: [15,15,15]


6. Back in chapter 7, you wrote a function called foldBool. That function exists in a module known as Data.Bool and is called (bool :: a -> a -> Bool -> a). Write a function that does the same (or similar, if you wish) as the map (if-then-else) function you saw above but uses bool instead of the if-then-else syntax. Your first step should be bringing the bool function into scope by typing import Data.Bool at your Prelude prompt.
#
# Ans: λ> import Data.Bool 
       λ> :{
       λ| import Data.Bool (bool)
       λ| 
       λ| foldBool :: a -> a -> Bool -> a
       λ| foldBool x _ False = x
       λ| foldBool _ y True  = y
       λ| :}   
          
 




##################################
# page 513: Filtering
# 
# see: Filtering_pg513.hs
# 





##################################
# page 517: Zipping
# 
# see: Zipping_pg517.hs
# 





##################################
# page 517: Chapter Exercises
#           Data.Char
# 
# see: DataChar_pg517.hs
# 





##################################
# page 519: Chapter Exercises
#           Ciphers
# 
# see: Cipher_pg519.hs
# 



##################################
# page 521: Chapter Exercises
#           Writing your own standard functions
#
# see: OwnFunctions_pg521.hs
#


