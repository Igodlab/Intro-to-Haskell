##################################
# page 191: Type Matching
# 

Match the function to its type signature.

1. Functions:

a) not    # 2c)
b) length # 2d)
c) concat # 2b)
d) head   # 2a)
e) (<)    # 2e)


2. Type signatures:

a) _ :: [a] -> a                # 1d)
b) _ :: [[a]] -> [a]            # 1c)
c) _ :: Bool -> Bool            # 1a)
d) _ :: [a] -> Int              # 1b)
e) _ :: Ord a => a -> a -> Bool # 1e)


##################################
# page 205: Type Arguments
# 

Given a function and its type, tell us what type results from applying some or all of the arguments.

1. If the type of f is a -> a -> a -> a, and the type of 𝑥 is Char then the type of f x is 

a) Char -> Char -> Char # Ans: a)
b) x -> x -> x -> x
c) a -> a -> a
d) a -> a -> a -> Char


2. If the type of g is a -> b -> c -> b, then the type of g 0 'c' "woot" is

a) String
b) Char -> String
c) Int
d) Char           # Ans: d)


3. If the type of h is (Num a, Num b) => a -> b -> b, then the type of h 1.0 2 is:

a) Double
b) Integer         
c) Integral b => b 
d) Num b => b      # Ans: d)


Note that because the type variables 𝑎 and 𝑏 are diﬀerent, the compiler must assume that the types could be diﬀerent. 


4. If the type of h is (Num a, Num b) => a -> b -> b, then the type of h 1 (5.5 :: Double) is

a) Integer
b) Fractional b => b
c) Double            # Ans: c)
d) Num b => b


5. If the type of jackal is (Ord a, Eq b) => a -> b -> a, then the type of jackal "keyboard" "has the word jackal in it"

a) [Char]              # Ans: a)
b) Eq b => b
c) b -> [Char]
d) b
e) Eq b => b -> [Char]


