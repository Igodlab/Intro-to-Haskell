NOTE: To get λ type SHIFT + CTRL + u followed by 03bb.


##################################
# page 342: Grab Bag
# 
#

1. Which (two or more) of the following are equivalent?

a) mTh x y z = x * y * z
b) mTh x y = \z -> x * y * z
c) mTh x = \y -> \z -> x * y * z
d) mTh = \x -> \y -> \z -> x * y * z
# Ans: all of them are equivalent. In fact the way a) computes is broken-down step by step top-to-bottom.


2. The type of mTh (above) is Num a => a -> a -> a -> a. Which is the type of mTh 3?

a) Integer -> Integer -> Integer
b) Num a => a -> a -> a -> a
c) Num a => a -> a
d) Num a => a -> a -> a          # Ans: d)


3. Next, we’ll practice writing anonymous lambda syntax. For example, one could rewrite:

addOne x = x + 1
-- Into:
addOne = \x -> x + 1
# Ans:

Try to make it so it can still be loaded as a top-level definition by GHCi. This will make it easier to validate your answers.

a) Rewrite the f function in the where clause. 

addOneIfOdd n = case odd n of
                True  -> f n
                False -> n
              -- where f n = n + 1
              -- # Ans:
              where f = \x -> x + 1


b) Rewrite the following to use anonymous lambda syntax:

addFive x y = (if x > y then y else x) + 5
-- # Ans:
addFive = \x -> \y -> 5 + $ if x > y then y else x 

c) Rewrite the following so that it doesn’t use anonymous lambda syntax:

mflip f = \x -> \y -> f y x
-- # Ans:
mflip f x y = f y x




##################################
# page 364: Case Practice
# 
# see: CasePractice_pg364.hs
#




##################################
# page 376: Artful Dodgy
# 
# see: ArtfulDodgy_pg376.hs
#
Given 

dodgy x y = x + y * 10
oneIsOne  = dodgy 1
oneIsTwo  = (flip dodgy) 2

-- 1. For example, given the expression dodgy 1 0, what do you think will happen if we evaluate it? If you put the definitions in a file and load them in GHCi, you can do the following to see the result.

λ> dodgy 1 0
1

-- Now attempt to determine what the following expressions reduce to. Do it in your head, verify in your REPL after you think you have an answer.

2. dodgy 1 1   # Ans: λ> 11
3. dodgy 2 2   # Ans: λ> 22
4. dodgy 1 2   # Ans: λ> 21
5. dodgy 2 1   # Ans: λ> 12
6. oneIsOne 1  # Ans: λ> 11 
7. oneIsOne 2  # Ans: λ> 21
8. oneIsTwo 1  # Ans: λ> 21
9. oneIsTwo 2  # Ans: λ> 22
10. oneIsOne 3 # Ans: λ> 31
11. oneIsTwo 3 # Ans: λ> 23




##################################
# page 385: Guard Duty
# 
# see: GuardDuty_pg385.hs
#

avgGrade :: (Fractional a, Ord a)
         => a -> Char
avgGrade x
           | y >= 0.9 = 'A'
           | y >= 0.8 = 'B'
           | y >= 0.7 = 'C'
           | y >= 0.59 = 'D'
           | y < 0.59 = 'F'
         where y = x / 100

1. It is probably clear to you why you wouldn’t put an otherwise in your top-most guard, but try it with avgGrade anyway and see what happens. It’ll be more clear if you rewrite it as an otherwise match: | otherwise = 'F'. What happens now if you pass a 90 as an argument? 75? 60?

# Ans: defaults to 'F' regardless of the value of x


2. What happens if you take avgGrade as it is written and reorder the guards? Does it still typecheck and work the same? Try moving | y >= 0.7 = 'C' and passing it the argument 90, which should be an ‘A.’ Does it return an ‘A’? 

# Ans: Reordering guards for Ordering cases must follow ascending/descending order


3. The following function returns 

pal xs
    | xs == reverse xs = True
    | otherwise        = False

a) xs written backwards when it’s True # Ans: a) & b)
b) True when xs is a palindrome        # Ans: a) & b)
c) False when xs is a palindrome
d) False when xs is reversed


4. What types of arguments can pal take?
# Ans: it can take a list of parametrical polymorphic values constrained by the Eq typeclass.


5. What is the type of the function pal?
# Ans: pal :: Eq a => [a] -> Bool


6. The following function returns

numbers x
    | x < 0  = -1
    | x == 0 = 0 
    | x > 0  = 1

a) the value of its argument plus or minus 1                   #
b) the negation of its argument                                #
c) an indication of whether its argument is a pos, neg or zero # Ans: c)
d) binary machine language                                     #


7. What types of arguments can numbers take?
# Ans: Any number constrained by Num and Ord typeclass.


8. What is the type of the function numbers?
# Ans: numbers :: (Eq a, Ord a, Num b) => a -> b




##################################
# page 400: Chapter Exercises
#           Multiple Choice
# 

1. A polymorphic function

a) changes things into sheep when invoked                       #
b) has multiple arguments                                       #
c) has a concrete type                                          #
d) may resolve to values of diﬀerent types, depending on inputs # Ans: d)


2. Two functions named f and g have types Char -> String and String -> [String] respectively. The composed function g . f has the type 

a) Char -> String
b) Char -> [String]           # Ans: b)
c) [[String]]
d) Char -> String -> [String]


3. A function f has the type Ord a => a -> a -> Bool and we apply it to one numeric value. What is the type now? 

a) Ord a => a -> Bool          #
b) Num -> Num -> Bool          #
c) Ord a => a -> a -> Integer  #
d) (Ord a, Num a) => a -> Bool # Ans: d)


4. A function with the type (a -> b) -> c

a) requires values of three diﬀerent types  # Ans: a) & b)
b) is a higher-order function               # Ans: a) & b)
c) must take a tuple as its first argument
d) has its parameters in alphabetical order


5. Given the following definition of f, what is the type of f True?

f :: a -> a
f x = x

a) f True :: Bool         # Ans: a)
b) f True :: String
c) f True :: Bool -> Bool
d) f True :: a



##################################
# page 402: Chapter Exercises
#           Let's write code
# 
# see: LetsWriteCode_pg402.hs
#      Arith4_pg402.hs
#




