NOTE: To get Î» type SHIFT + CTRL + u followed by 03bb.


##################################
# page 342: Grab Bag
# 
#

1. Which (two or more) of the following are equivalent?

a) mTh x y z = x * y * z
b) mTh x y = \z -> x * y * z
c) mTh x = \y -> \z -> x * y * z
d) mTh = \x -> \y -> \z -> x * y * z
# Ans: all of them are equivalent. In fact the way a) computes is broken-down step by step top-to-bottom.


2. The type of mTh (above) is Num a => a -> a -> a -> a. Which is the type of mTh 3?

a) Integer -> Integer -> Integer
b) Num a => a -> a -> a -> a
c) Num a => a -> a
d) Num a => a -> a -> a          # Ans: d)


3. Next, weâ€™ll practice writing anonymous lambda syntax. For example, one could rewrite:

addOne x = x + 1
-- Into:
addOne = \x -> x + 1
# Ans:

Try to make it so it can still be loaded as a top-level definition by GHCi. This will make it easier to validate your answers.

a) Rewrite the f function in the where clause. 

addOneIfOdd n = case odd n of
                True  -> f n
                False -> n
              -- where f n = n + 1
              -- # Ans:
              where f = \x -> x + 1


b) Rewrite the following to use anonymous lambda syntax:

addFive x y = (if x > y then y else x) + 5
-- # Ans:
addFive = \x -> \y -> 5 + $ if x > y then y else x 

c) Rewrite the following so that it doesnâ€™t use anonymous lambda syntax:

mflip f = \x -> \y -> f y x
-- # Ans:
mflip f x y = f y x

##################################
# page 364: 
# 
#

