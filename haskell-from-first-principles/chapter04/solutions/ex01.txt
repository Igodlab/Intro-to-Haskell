##################################
# page 136: Mood Swing
# 

Given the following datatype, answer the following questions:

data Mood = Blah | Woot deriving Show

1. What is the type constructor, or name of this type?
# Ans:
type constructor/name: Mood


2. If the function requires a Mood value, what are the values you could possibly use?
# Ans:
pssoble values are the data constructors under the Mood type, so Blah or Woot


3. We are trying to write a function changeMood to change Chris’s mood instantaneously. It should act like not in that, given one value, it returns the other value of the same type. So far, we’ve written a type signature changeMood :: Mood -> Woot. What’s wrong with that?
# Ans:
The funciton changeMood should be defined in terms of the type signature. At evaluation, a function ends up returning values, it access the term-level data constructors but it is defined using the type name.

4. Now we want to write the function that changes his mood. Given an input mood, it gives us the other one. Fix any mistakes and complete the function: 

changeMood Mood = Woot
changeMood    _ = Blah

We’re doing something here called pattern matching. We can define a function by matching on a data constructor, or value, and describing the behavior that the function should have based on which value it matches. The underscore in the second line denotes a catch-all, otherwise case. So, in the first line of the function, we’re telling it what to do in the case of a specific input. In the second one, we’re telling it what to do regardless of all potential inputs. It’s trivial when there are only two potential values of a given type, but as we deal with more complex cases, it can be convenient. 
# Ans:
see ex01.hs


5. Enter all of the above — datatype (including the deriving Show bit), your corrected type signature, and the corrected function into a source file. Load it and run it in GHCi to make sure you got it right.
# Ans:
see ex01.hs


##################################
# page 155: Find the Mistakes
# 

The following lines of code may have mistakes — some of them won’t compile! You know what you need to do. 

1. not True && true           # λ> not True && True
                              # False

2. not (x = 6)                # x is not in Scope

3. (1 * 2) > 5                # False

4. [Merry] > [Happy]          # λ> "[Merry]" > "[Happy]"
                              # True

5. [1, 2, 3] ++ "look at me!" # λ> "[1,2,3]" ++ "look at me!"
                              # "[1,2,3]look at me!"

##################################
# page 167: Chapter exercises
# 

Also, you will need to have the awesome, also, and allAwesome code from above in scope for this REPL session 

awesome = ["Papuchon", "curry", ":)"]
also = ["Quake", "The Simons"]
allAwesome = [awesome, also]

length is a function that takes a list and returns a result that tells how many items are in the list.

1. Given the definition of length above, what would the type signature be? How many arguments, of what type does it take? What is the type of the result it evaluates to?
# Ans:
length is foldable, it takes a Foldtable argument (t a), it evaluates to an Int

length :: Foldable t => t a -> Int


2. What are the results of the following expressions?

a) length [1, 2, 3, 4, 5]          # 5
b) length [(1, 2), (2, 3), (3, 4)] # 3
c) length allAwesome               # 2
d) length (concat allAwesome)      # 5


3. Given what we know about numeric types and the type signature of length, look at these two expressions. One works and one returns an error. Determine which will return an error and why. 

(n.b., you will find Foldable t => t a representing [a], as with concat in the previous chapter. Again, consider Foldable t to represent a list here, even though list is only one of the possible types.)

Prelude> 6 / 3                # this one will work
-- and
Prelude> 6 / length [1, 2, 3] # fails, because length returns Int (doesn't have Fractional instance)
                              # and (/) expects types that have an instance of Fractional


4. How can you fix the broken code from the preceding exercise using a diﬀerent division function/operator?
# Ans:
We could use `div` instead:
λ> 6 `div` length [1,2,3]


5. What is the type of the expression 2 + 3 == 5? What would we expect as a result?
# Ans: 
True


6. What is the type and expected result value of the following:

Prelude> let x = 5
Prelude> x + 3 == 5
# Ans:
False


7. Below are some bits of code. Which will work? Why or why not? If they will work, what value would these reduce to?

Prelude> length allAwesome == 2             # True
Prelude> length [1, 'a', 3, 'b']            # fails, list expects its elements to have the same type 
Prelude> length allAwesome + length awesome # 5
Prelude> (8 == 8) && ('b' < 'a')            # False
Prelude> (8 == 8) && 9                      # fails, second argument is not Bool type


problems 8, 9 10.
# Ans: see ex01.hs


##################################
# page 170: Correcting Syntax
# 

# Ans: see ex01.hs 



##################################
# page 171: Match the Function names to their types
# 

1. Which of the following types is the type of show?
a) show a => a -> String
b) Show a -> a -> String
c) Show a => a -> String
# Ans: c)

2. Which of the following types is the type of (==)?
a) a -> a -> Bool
b) Eq a => a -> a -> Bool
c) Eq a -> a -> a -> Bool
d) Eq a => A -> Bool
# Ans: b)


3. Which of the following types is the type of fst?
a) (a, b) -> a
b) b -> a
c) (a, b) -> b
# Ans: a)


4. Which of the following types is the type of (+)?
a) (+) :: Num a -> a -> a -> Bool
b) (+) :: Num a => a -> a -> Bool
c) (+) :: num a => a -> a -> a
d) (+) :: Num a => a -> a -> a
e) (+) :: a -> a -> a
# Ans: d) 


